import numpy as np
import re
import math
import itertools
import get_input
from functools import lru_cache
from collections import OrderedDict
import time


def parse_map(garden_map):
    res = []
    for i, line in enumerate(garden_map.split('\n')):
        if 'S' in line:
            start = (i, line.index('S'))
            line = line.replace('S', '.')
        res.append(list(line))

    return res, start


example = """...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
..........."""

example2 = """...........
......##.#.
.###..#..#.
..#.#...#..
....#.#....
.....S.....
.##......#.
.......##..
.##.#.####.
.##...#.##.
..........."""

resultsof3 = """...........
......##.#.
.###.3#..#.
..#.#23.#..
...3#1#3...
..3210123..
.##32123.#.
....323##..
.##.#3####.
.##...#.##.
..........."""


real_talk="""...................................................................................................................................
...................#.....#.....#.#.............#.#......#.......................#......#.......#......#...#...#.##..........##.....
......#......#.....#....#........#...............#..........................#................#...........#...#......#.....#.##.#...
..#.........#......#........##..##.#............#.#.#.#...................##....#......#.#............#...........#................
.#...............#....###.#....#...........#........##..............................#...............##.............#....#..........
............#.............##..#.#.....#..........#...#....................###...#.......#...........#.......##.#.........#.........
.................#..........#..#..#.....##..#........#..........#............#...##.#..............#.....#.........#....#..#.......
...#.......#..........#..#......###............#...#.#......................#.....#........###.#.............#..#....#..........#..
.................#...#........................................................#.#..................##...#.#.#....#...##..........#.
....#..........#...##...#...........#...........#................................#..#.............#.#...........#....#........#....
.....#....##...#........#......#.#..............#..........#......#..............#.......#...................#.......#...##..#...#.
......#...#.#....#...............#............#.....................#................#...###.#...#..........#.##...#...............
.....##..#............#..#.........#..#....#...............#..............................#.#.......................#............#.
.........##.....#.....#.........#.....#....#...............#.##.#....................#........................#..#..#...........#..
......#.##.............#......#.##.............................#......#..#..........#....#.#.......#...#.#...#.......#.#........#..
...................#..........#...........#.................#......#.......#..................#.....#...........#.#...#............
.....#.........##........#.........#.#.#.##..............#....#..........##.............###.##.....#......##.##.#...............#..
.#..#.....#...#..#......#..........................................#..........................#.....#......#.......................
.....#.#....#..........#............#.....##.................#................................#.##..#...........#............#.....
............#.......#...#.#......#.............................#...............................#..........#................#.....#.
.......#.....##..........##.#.........#...............................#......#.#..........................#......#......##.....#...
......#.#.......#..#..#..#............................##.#....##..........#...............#.......#.............##.....##..........
................#..#.........#.....#...........#...##.#.....#.......#......#...............#..#......##........#...#.#.............
.#............#..#.#.#....#....#.............................#.........#...........#................#....#...#....#...#.#...#......
.................#......#......##..............#.........#........#.........#...#....#............#.#..#...................#..##...
........#..........#..........................##..#....#...............................................#......#...........##..#....
........#.#.#..........#...#....................#....#..#....#.........#...#..#.................#......#..##......#..........#.....
...............#..................#.................................#..#....#..#..#...................#.......#............#.......
.#.#..............#......#.............................................#..............##....................#...........#......#.#.
.#.........#.....#............#...............#...........#.......#......#........................#...#..................#.........
......#.........#....#.....................#.#..................#....#....#.....###..#.#.............#..#..........................
...#....#................................#.....#.#...........#.................#.................................#.......#.....#.#.
...#...#..##...........#..............#....................#.........#.#....#....##..................#....#...#....................
......#..........#........#...........................##........#.#.....#.....#.......#...............#.......#....................
.......#..........##..#.#..........................#.#........#.#...........#...........#....#.........#..................#.#......
....................#....................#.........#...#......#.......#.......##...................................................
..........#............#..........#........#...........#......................#..........................##.#..#.........#...#.....
......#.....#.....................#.##.........#...#............#.#...........#...#.#............#.........##......#..........#....
.....#..........#.....#..............#.......#..##...........#.............#..#....#...#.......................##...........##...#.
.#..........#...#....................#...#......#..#.................#........#..........#...#...#..#.........#.........#....#.....
......#......#.....................#.......#.....#.........................##............#.#..##.................#...#...###.......
.......#.......#...................#..........#...#.....#......................#......##.....#.................#.............#.....
......#.....#..#..................#............................#....#.#..#..##.....................................................
.....#..#....#..#.#...............#......#.............#..#...........#.....#....#..#......#.#.....................##.#............
....#.......#..#.........#........#....#.#..................##......#..........#........................#.............#.....#......
.#.....#......#........................#..#..............................#..........#.......#.......##...#...........#.............
...........................#.........#....##.....#.#....#...###...######...#.#......#...............#..........................##..
..#......#................#.#......#.#.............#..#......#....#..#..#..#.........................##.........................#..
...#........#.........#.##..............................##.#....#.......#.......#.......................#.#.#...............#....#.
.......#..#.......................#..............#..........................#.#.....#.....#............#..............#..#.#.....#.
..#.........................##......................#.........#.#.#.#........#.................#.....#..#.#........................
..................#.......#.................#.#...................#.......#.#...........#......##...........................#......
.......................#.#.....##...#.#.....#...#...#.##...#.............#.....................##.##...............................
..#...............#.....#......#.....###.......................#............#.............#.#.....#.#.#............................
.......#...................#......#...#....................#.#...............#..........................#..#................#..#...
...........................#..........##..#..........#................................#..##..#.......##....#....#...........#......
...##.............#...##.....#.......#...............#.....###..#.........#.............#....#........#...#.....#.#................
.#...................#...##...........#............##........................#....#....#.....#........#......#...................#.
..............#.#..........#................................#...........#..#..............##..##...#.......#.......#..#..........#.
...............#........#........#..............#....#.........#.......#..........#.......#.#............#......#.#...#.........#..
.........#.......###...#.#...#..................#..#.......#...##...#.....##............#..#.......#...............................
............#......#.......................#..........#...#........#.#.......#....................#......#......#....#....#........
.........##.....#.......................................#...........#........................#.........#...........................
..........##.........#.....#.......#.................##..#.#......##...............#....#...#..#..#...##..#.##.#.....#.#.#.........
.......................#..............#......##.#.#.#...................##....##........#....#.....................#...............
.................................................................S.................................................................
.....#............#................#..###............#..##....#.#......#...........#..........#...#................................
...........#.......#...#.........#....#........#..#................#.........#.#......................#....#....#.........#.#......
................#..#........................#..#................#......#..#.......#...........##...#...............#...............
............#....#...#.....#.##.............#.#..............#.#...#........#...........#..#...##.........................#........
.#.........##.#..#...#.....#.#....##.#.#.....#.................#...#.........................#............#.#.#....#...............
.#...........#.#..........#......................#...#......##............#....................#......##.......#........#..........
..#......................#.#.............#..#.........................#........##.#.#...#..#.#...................#.................
.........................................#.#...#.#............#.............#...........#.#..#.#.#.......#.#.....#..#..............
....#........................#........#...#...........#..#..................##.#.#...........#....#.#......#...................#.#.
......#..........#.......##....#..........#.....#.............#.#......#..........#....#...........#.......#.......#...........#...
...#............#........#..#...........#........#..###.....#..#..........#...........#.........#.........#...##.###............##.
.......#........#....#.#.#.........#..#...............#..#........#.......#.................#.......#...#........#..............#..
.......................#............#.....#......#............#....#.....#.#..#..........#.......#...#........#..........#.........
...#..............#...................#.....#.........#....#.........#.......#.#.............##........#....#...#..................
..........#..........#......#.............#....................#..#.......#.#.#....##...#.#................................#.......
..#...........................#.......................................#....#..........#....................#................#....#.
......................#.#...............#.......#.........#....##.................#......#..........#....................##......#.
.........#...#............#...............##.....#......#..#........#.....#...#............#....................................#..
......##..#.#...........#..#...........###.....#........................##.....................#........#..........................
............#...............#....#..#..............#.................#......#.#..#..........#..................................#...
.............#.##...................................#.........##...#.....................................#.................#.#...#.
.#...........................#............#............#.####..........................#.#...#.#.....#...........#.................
.....#...........#.#.................#....#....#....##.#.....#.....#...#............##...#.#....................#.#.#..#..#..#.....
........#.#..#..#...........#.........#..#.....#.##.#........#......................#........#.....##...........#......#...........
............#..#................#......#.#.#............#...#...........#....#..#..............................................#.#.
......#...#............................................................#...#................#.##............#.....#....#.......#...
..#..........#...#.....................#............#........#.......#.##....#...#.............#........................##......#..
..#....#.#..........................#.#......#.......#..........#......#..........#......#.....#...............#.##.....#...#......
.................#......##........#....................#..#.......#........#.......#.#.....................#...................#...
....####..............##...........#.........#....#......#.....................#.#...#.....#.#...............#.#...................
......#.....#.............................#.........#..#..#.....#.#............##......##..#............#..#....#......#...#...###.
.#........#............#...#..............#..............##....#......#...#.#.#.........#..#.#........#...........#...##....#......
.......#......#..#.....#.....................#....#..#..............#...............#....................#....#...##..#.......#.##.
........#.........#....###...#...........#..........#..........#....#....#...........#......#...........#...#..........#.......#...
....#...........#.......#...##.........#...#...#...#......#..............#......................................#.......##....##...
.....##..#..........#..#...#.................##.........................#..#............................#......#.#..............#..
.#.#.##...............#.........#...............................#..#....##.#......#...#..#.............#................#..........
.....................#....#.....#............#..#.#.....#...........#......#..........................#................###...#.....
.#.......#..#.....................##..........#.............................##......#.................#...............#.....#.##...
..#..............#...#.#........................#..#..................##.......#..............##.#..................##.............
............#..........#.................................................#......#..#.#.........#...#....................#....#.....
.......#.................#.....................#.....#..##....................#.........................#........#...#....#.##.....
.#..............###.....#.........#...................#....#............#..#.................#......##....##.#.#.........#.........
..................#.#.................................#.......##..#..#.#..#.#.#.........................#...#..........#...#.......
.......##...#...##...#.............................................#...#.........................#..........##.....###...#.....#...
.......#........#..#...#....#..........#.#........#........#......#..#...................#........#.#....##.#......#.#.........#...
..#....#..........#.#..#...........#.....................#..#...#.#...#..#..#..............#......#..#.......#..##..#..............
..........#.........#...##..........#...#..........................#.........................#.................#.....#.....#.....#.
............#......#..#...............#.....#..................#.......#....................#...#....#...#......#........#...#.....
.##........................#....##.#....................#.....#...........#...........#...#........#...#..........#..#......#......
...#....................#...............#...............................#....................................#....#.#..........#...
......................#.............##....#.............#....#..#.#.......#............##............#.#.##.........#......#...#...
..#..#..........#.##.........#......##...#......................#...................#.................#..................##........
.........#............##.#....#......#....##.#.#..........#.......#...#.............#........................#..........#..........
.....#..#............#..............#..#..............................#................#.....#...........................#.#.#.....
........#..#.##...#..#..##.#....#..........##.................##..#...............#.#....#..........#.........##..##...............
..........#..........#....#..#.............#.................#.....#..............#...........##......##...........................
.#....##...#...........#.................##....................................#..#..........................#...........#.........
.............................#............#..#......#...........................##..............#.#...#............#.......##.#....
....#...........#..##....##.#......##.....##........#..##.................#.........................#.......##.#.#...#...#.........
..........#...#............#....#....#..##.....#.........#........................#..............#.......................#.....#...
..#.....#....#...#..##.#..........#.#.....#...............#..............#.##..#...#..........#.....#.#.........##.##.....#......#.
......#....#.........#............#.....................##................#..#.............#..............#....#.............#.....
.......#...........#......#........#.............#...#......#................#.#.#........#.....#.#.#....#.######......#...........
..................................................................................................................................."""

def go_for_a_walk(garden_map, start, max_steps):
    garden_map = np.array(garden_map)
    steps_map = {start: 0}
    spots = [start]
    reachable = set(start)
    height, width = garden_map.shape
    shown = []
    while spots:
        curr_spot = spots.pop()
        curr_steps = steps_map[curr_spot]
        if len(steps_map) % 10000 == 0 and len(steps_map) not in shown:
            print(len(steps_map))
            shown.append(len(steps_map))
        if curr_steps > max_steps:
            continue
        for dir in [(0, 1), (0, -1), (1, 0), (-1, 0)]: 
            new_spot = (curr_spot[0] + dir[0], curr_spot[1] + dir[1])
            new_map_loc = (new_spot[0] % height, new_spot[1] % width)
            if garden_map[new_map_loc] == '#':
                continue
            else:
                if new_spot not in steps_map:
                    steps_map[new_spot] = curr_steps + 1
                    spots.append(new_spot)
                    if (steps_map[new_spot] - max_steps) % 2 == 0:
                        # append to set
                        reachable.add(new_spot)
                elif curr_steps + 1 < steps_map[new_spot]:
                    steps_map[new_spot] = curr_steps + 1
                    spots.append(new_spot)
                    if (steps_map[new_spot] - max_steps) % 2 == 0:
                        reachable.add(new_spot)

    # print(garden_map)
    # print(steps_map)
    # Count points with steps less than max_steps
    return len(reachable)


def shortest_path(garden_map, start, prior_steps_map={}):
    garden_map = np.array(garden_map)
    height, width = garden_map.shape
    steps_map = prior_steps_map.copy()
    steps_map[start] = 0
    spots = [start]
    while spots:
        curr_spot = spots.pop()
        curr_steps = steps_map[curr_spot]
        for dir in [(0, 1), (0, -1), (1, 0), (-1, 0)]: 
            new_spot = (curr_spot[0] + dir[0], curr_spot[1] + dir[1])
            if new_spot[0] < 0 or new_spot[1] < 0:
                continue
            elif new_spot[0] >= height or new_spot[1] >= width:
                continue
            if garden_map[new_spot] == '#':
                continue
            else:
                if new_spot not in steps_map:
                    steps_map[new_spot] = curr_steps + 1
                    spots.append(new_spot)
                elif curr_steps + 1 < steps_map[new_spot]:
                    steps_map[new_spot] = curr_steps + 1
                    spots.append(new_spot)
    return steps_map


def augmented_map(prior_map, spot, prior_start):
    extra_dist = abs(spot[0] - prior_start[0]) + abs(spot[1] - prior_start[1])
    prior_map = {spt: prior_map[spt] + extra_dist for spt in prior_map}
    return prior_map


def get_edge_steps(garden_map, prior):
    # Find shortest path from each edge
    edge_steps_map = {}
    height, width = garden_map.shape
    for edge in ['L', 'B', 'R', 'T']:
        if edge == 'L':
            for i in range(height):
                edge_spot = (0, i)
                prior_map = augmented_map(prior[1], edge_spot, prior[0])
                edge_steps_map[edge_spot] = shortest_path(garden_map, edge_spot, prior_map)
        elif edge == 'B':
            for i in range(width):
                edge_spot = (i, height-1)
                prior_map = augmented_map(prior[1], edge_spot, prior[0])
                edge_steps_map[edge_spot] = shortest_path(garden_map, edge_spot, prior_map)
        elif edge == 'R':
            # iterate from height down to 0 (use range with step=-1)
            for i in range(height-1, 0, -1):
                edge_spot = (width-1, i)
                prior_map = augmented_map(prior[1], edge_spot, prior[0])
                edge_steps_map[edge_spot] = shortest_path(garden_map, edge_spot, prior_map)
        elif edge == 'T':
            for i in range(width-1, 0, -1):
                edge_spot = (i, 0)
                prior_map = augmented_map(prior[1], edge_spot, prior[0])
                edge_steps_map[edge_spot] = shortest_path(garden_map, edge_spot, prior_map)
        prior = (edge_spot, edge_steps_map[edge_spot])

    return edge_steps_map


def get_corner_steps(garden_map):
    # Find shortest path from each edge
    corner_steps_map = {}
    height, width = garden_map.shape
    for corner in [(0,0), (0, width-1), (height-1, 0), (height-1, width-1), (0, width//2), (height//2, 0), (height-1, width//2), (height//2, width-1)]:
        corner_steps_map[corner] = shortest_path(garden_map, corner)
    return corner_steps_map


def infinite_walk(garden_map, start, max_steps):
    garden_map = np.array(garden_map)
    height, width = garden_map.shape
    steps_map = shortest_path(garden_map, start)
    print('Have shortest path')
    reachable_count = {(steps_map[(0,0)] - max_steps)%2: 0,
                       (steps_map[(0,0)] - max_steps+1)%2: 0}
    
    # Initial plot
    tot_reachable = 0
    for spt in steps_map:
        if steps_map[spt] <= max_steps and (steps_map[spt] - max_steps) % 2 == 0:
            tot_reachable += 1
    # for row in range(height):
    #     print()
    #     for col in range(height):
    #         loc = (row, col)
    #         if loc not in steps_map:
    #             print('#', end='')
    #         elif steps_map[loc]<10:
    #             print(steps_map[loc], end='')
    #         else:
    #             print('.', end='')
    # exit()
    # Set reachable when whole map can be reached
    corner_steps_map = get_corner_steps(garden_map)
    max_steps_anywhere = max([max(corner_steps_map[spt].values()) for spt in corner_steps_map])
    zero_state = (steps_map[(0,0)] - max_steps)%2
    for spt in steps_map:
        if (corner_steps_map[(0,0)][spt] - max_steps) % 2 == 0:
            reachable_count[zero_state % 2] += 1
        else:
            reachable_count[(zero_state+1) % 2] += 1

    # Min distance from each edge to anywhere on the map
    # edge_steps_map = get_edge_steps(garden_map, (start, steps_map))
    
    # print('Have edge steps')
    print('Have corner steps')
    print(tot_reachable)
    print(reachable_count)
    print(height, width)


    for i in range(-max_steps//height, max_steps//height+1 + 1):
        if i%100==0:
            print("Processing row: {row} of {tot}; {tot_reach} so far".format(row=i, tot=max_steps//height+1, tot_reach=tot_reachable))
        steps_to_plot = 0
        entry = (height//2, width//2)
 
        if i!=0:
            steps_to_plot += width//2 + 1
            steps_to_plot += (abs(i) - 1) * width

            if i<0:
                entry = (0, entry[1])
            elif i>0:
                entry = (height-1, entry[1])

        remaining_steps = max_steps - steps_to_plot
        if remaining_steps < 0:
            continue
        j = -remaining_steps//width
        if j == 0:
            pass
        else:
            steps_to_plot += height//2 + 1
            steps_to_plot += (abs(j) - 1) * height
        while steps_to_plot <= max_steps or j<0:

            if j<0:
                entry = (entry[0], 0)
            elif j>0:
                entry = (entry[0], width-1)

            if i == 0 and j == 0:
                pass
            elif steps_to_plot + max_steps_anywhere < max_steps:
                zero_state = (corner_steps_map[entry][(0,0)] + steps_to_plot - max_steps) % 2
                tot_reachable += reachable_count[zero_state]
            else:
                # print('Processing',i, j, entry, steps_to_plot, max_steps)
                for spt in steps_map:
                    steps_to_spt = steps_to_plot + corner_steps_map[entry][spt]
                    if steps_to_spt <= max_steps and (steps_to_spt-max_steps) % 2 == 0:
                        tot_reachable += 1
            j+=1
            if j==0:
                steps_to_plot -= (height//2 + 1)
                entry = (entry[0], width//2)
            elif j==1:
                steps_to_plot += (height//2 + 1)
            elif j<0:
                steps_to_plot -= height
            elif j>0:
                steps_to_plot += height

    elapsed = time.time() - time1

    return tot_reachable

# garden_map, start = parse_map(get_input.get_input_file(21))
garden_map, start = parse_map(real_talk)
example_answers={6: 16, 10: 50, 50: 1594, 100: 6536, 500: 167004, 1000: 668697, 5000: 16733044}
example2_answers={6: 36, 10: 90, 50: 1940, 100: 7645, 500: 188756, 1000: None, 5000: None}

time1 = time.time()
testing = 5000
print("\n\n The Answer for max of", testing, "is", infinite_walk(garden_map, start, testing))
# print("\n\n The Answer for max of", testing, "is", go_for_a_walk(garden_map, start, testing))
print(" The actual Answer should be ", example_answers[testing], '\n\n')
elapsed = time.time() - time1
print('Elapsed time: {}'.format(time.strftime("%H:%M:%S", time.gmtime(elapsed))))